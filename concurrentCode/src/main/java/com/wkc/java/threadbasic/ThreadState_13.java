package com.wkc.java.threadbasic;

/**
 * Created on 2022/3/9.
 *
 * @author Weikaichen
 */
public class ThreadState_13 {
    /*
    * 五种状态
    * 就是从操作系统层面描述
    *
    * 【初始状态】仅是在语言层面创建了线程对象，还未与操作系统相关联
    * 【可运行状态】（就绪状态）指该线程已经被创建（与操作系统关联），可以由CPU调度执行，任务调度器
    * 【运行状态】指获取了Cpu时间片运行中的状态
    *   当cpu时间片用完，会从【运行状态】转换至【可运行状态】，会导致线程上下文切换
    * 【阻塞状态】
    *   如果调用了阻塞API，如BIO读写文件，这时线程实际不会用到CPU。会导致线程上下文切换进入【阻塞状态】
    *   等BIO操作完毕，会由操作系统唤醒阻塞的线程，切换至【可运行状态】
    *   与【可运行状态】的区别是，对【阻塞状态】的线程来说只要他们一直不唤醒，调度器就不会调度他们
    * 【终止状态】
    *   表示线程执行完毕，生命周期已经结束，不会转换成其他状态
    * */


    /*
    * 六种状态
    * 这是从Java API 层面描述的
    * 根据Thread state枚举，分为六种状态
    *
    * 【NEW】 线程刚被创建，但是还没调用start()方法
    * 【RUNNABLE】 当调用了start()方法之后，Java API层面的RUNNABLE状态涵盖了操作系统层面的
    *   可运行状态，运行状态，阻塞状态（由于BIO导致的线程阻塞，在Java里无法区分，依然认为可运行）
    * 【BLOCKED】
    * 【WAITING】
    * 【TIMED_WAITING】
    * 【TERMINATED】终止状态
    * */
}
