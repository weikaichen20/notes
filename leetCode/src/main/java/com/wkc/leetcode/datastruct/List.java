package com.wkc.leetcode.datastruct;

/**
 * Created on 2022/3/23.
 *
 * @author Weikaichen
 */
public class List {

    //                          哈希表的介绍
    // 1.哈希表在使用层面上为一种集合结构
    // 2.如果只有key，没有伴随数据value，可以使用HashSet结构
    // 3.如果有key，有伴随数据value，可以使用HashMap结构
    // 4.有无伴随数据是HashSet和HashMap的唯一区别，底层实际结构一样
    // 5.使用哈希表增删改查操作，可以认为时间复杂度为O(1),但是常数时间比较大
    // 6.放入哈希表的东西，如果是基础类型，内部按值传递，内存占用就是值的大小
    // 7.放入哈希表的东西，如果是基础类型，内部按值传递，内存占用就是值的大小
    //
    //                          有序表的简单介绍
    // 1.有序表在使用层面上为一种集合结构
    // 2.如果只有key，没有伴随数据value，可以使用TreeSet结构
    // 3.如果有key，有伴随数据value，可以使用TreeMap结构
    // 4.有无伴随数据是TreeSet和TreeMap的唯一区别，底层实际结构一样
    // 5.有序表和哈希表的区别，有序表把key按照顺序组织起来，而哈希表完全不组织
    // 6.红黑树，AVL树，size-balance-tree和跳表都属于有序表结构，只是底层具体实现不同
    // 7.放入有序表的东西，如果是基础类型，内部按值传递，内存占用就是值的大小
    // 8.放入有序表的东西，如果不是基础类型，必须提供比较器，内部按引用传递，内存占用就是key的内存地址大小
    // 9.不管是什么底层具体实现，只要是有序表，都有以下基本功能和固定时间复杂度 O(logN)
    //
    //
    //      技巧
    //额外的数据结构
    //快慢指针
    //
    //

}
