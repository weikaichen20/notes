package com.wkc.jvm;

/**
 * Created on 2022/1/13.
 *
 * @author Weikaichen
 */
public class Stack_2 {
    //栈--线程运行需要的内存空间
    //栈帧(参数，局部变量，返回地址)--每个方法运行时所需要的内存空间
    //线程私有

    //Java Virtual Machine Stacks (Java虚拟机栈)
    //定义
    /*
     * 每个线程运行时所需要的内存，称为虚拟机栈
     * 每个栈是有多个栈帧(Frame)组成，对应着每次方法调用时所占用的内存
     * 每个线程只能有一个活动栈帧，对应着当前正在执行的那个方法
     * */
    public static void main(String[] args) {
        //演示栈帧
        method1();
    }

    private static void method1() {
        method2(1, 2);
    }

    private static int method2(int i, int i1) {
        return i + i1;
    }


    /**
     * 问题
     * 1.垃圾回收会不会管理栈内存？
     * 不会，垃圾回收只会回收堆内存
     * 2.栈内存分配的越大越好吗？
     * 配置栈内存的大小
     * -Xss1024K
     * 设得越大，理论上线程会减少。
     * 3.方法内的局部变量是否线程安全？
     * 每个线程调用方法会产生各自的栈帧，局部变量线程安全。
     * static 不加安全保护会引发线程安全问题
     * 结论：
     *  1.如果方法内局部变量没有逃离方法的作用范围，它是线程安全的
     *  2.如果局部变量引用了对象，并逃离方法的作用方法域，需要考虑线程安全
     */

    /**
     * 栈内存溢出
     * 1.栈帧过多导致栈内存溢出
     * 2.栈帧过大导致栈内存溢出
     */

    /**
     * 案例1:CPU占用过多
     * 定位
     *  1.用top定位那个进程对cpu的占用过高
     *  2.ps H -eo pid,tid,%cpu | grep 进程id (用ps命令定位是哪个线程引起的cpu占用过高)
     *  3.jstack 进程id
     *      可以根据线程id找到有问题的线程（需要进行十进制转十六进制）,进一步定位到问题代码的源码行号
     *
     * 案例2：程序运行很长时间没有结果
     * 通过jstack
     */
}
